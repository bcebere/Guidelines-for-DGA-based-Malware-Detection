# dga_analysis absolute
from collections import Counter

from dga_analysis.datasets.dataset_tranco import DatasetTranco
from dga_analysis.generators.pcfg import PCFGGenerator as plugin
from dga_analysis.utils.evaluation import generator_metrics, evaluate_generator


def test_pcfg_sanity():
    generator = plugin()
    assert generator.name() == "pcfg"


def test_pcfg_fit():
    X, _ = DatasetTranco(sample_size=100).raw()
    plugin().fit(X)


def test_pcfg_generate():
    X, _ = DatasetTranco(sample_size=100).raw()
    generator = plugin().fit(X)

    samples = generator.generate(10)

    assert len(samples) == 10


def test_pcfg_metrics():
    X, _ = DatasetTranco(sample_size=1000).raw()

    score = evaluate_generator(plugin(), X, 10000, 100)

    print(score)
