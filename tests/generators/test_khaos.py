# stdlib
from pathlib import Path

# third party
import pandas as pd
import pytest

# dga_analysis absolute
from dga_analysis.datasets.dataset_tranco import DatasetTranco
from dga_analysis.generators.khaos import KhaosGenerator as plugin
from dga_analysis.utils.evaluation import evaluate_generator

WORKSPACE = Path("workspace")


def test_khaos_sanity():
    generator = plugin()
    assert generator.name() == "khaos"


@pytest.mark.parametrize("generator_type", ["cnn", "lstm"])
@pytest.mark.parametrize("discriminator_type", ["cnn", "lstm"])
def test_khaos_fit(generator_type: str, discriminator_type: str):
    X, _ = DatasetTranco(sample_size=100).raw()
    plugin(
        generator_n_iter=10,
        generator_type=generator_type,
        discriminator_type=discriminator_type,
    ).fit(X)


@pytest.mark.parametrize("generator_type", ["cnn"])
@pytest.mark.parametrize("discriminator_type", ["cnn"])
# @pytest.mark.parametrize("src_size", [100, 1000, 10000])
@pytest.mark.parametrize("src_size", [1000, 10000])
def test_khaos_generate(generator_type: str, discriminator_type: str, src_size: int):
    X, _ = DatasetTranco(sample_size=src_size).raw(only_2ld=True)
    generator = plugin(
        generator_n_iter=100,
        generator_type=generator_type,
        discriminator_type=discriminator_type,
    ).fit(X)

    SAMPLE_SIZE = 50000
    samples = generator.generate(SAMPLE_SIZE)
    pd.Series(samples).to_csv(
        WORKSPACE
        / f"khaos_data_src{src_size}_gen{generator_type}_dis{discriminator_type}.csv"
    )

    assert len(samples) == SAMPLE_SIZE


@pytest.mark.parametrize("generator_type", ["cnn", "lstm"])
@pytest.mark.parametrize("discriminator_type", ["cnn", "lstm"])
def test_khaos_metrics(generator_type: str, discriminator_type: str):
    X, _ = DatasetTranco(sample_size=1000).raw()

    generator = plugin(
        generator_n_iter=10,
        generator_type=generator_type,
        discriminator_type=discriminator_type,
    )

    score = evaluate_generator(generator, X, 2000, 50)

    print(score)
