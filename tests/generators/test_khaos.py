# third party
import pytest

# dga_analysis absolute
from dga_analysis.datasets.dataset_tranco import DatasetTranco
from dga_analysis.generators.khaos import KhaosGenerator as plugin
from dga_analysis.utils.evaluation import generator_metrics, evaluate_generator


def test_khaos_sanity():
    generator = plugin()
    assert generator.name() == "khaos"


@pytest.mark.parametrize("generator_type", ["cnn", "lstm"])
@pytest.mark.parametrize("discriminator_type", ["cnn", "lstm"])
def test_khaos_fit(generator_type: str, discriminator_type: str):
    X, _ = DatasetTranco(sample_size=100).raw()
    plugin(
        generator_n_iter=10,
        generator_type=generator_type,
        discriminator_type=discriminator_type,
    ).fit(X)


@pytest.mark.parametrize("generator_type", ["cnn", "lstm"])
@pytest.mark.parametrize("discriminator_type", ["cnn", "lstm"])
def test_khaos_generate(generator_type: str, discriminator_type: str):
    X, _ = DatasetTranco(sample_size=100).raw()
    generator = plugin(
        generator_n_iter=10,
        generator_type=generator_type,
        discriminator_type=discriminator_type,
    ).fit(X)

    samples = generator.generate(10)
    print(samples)

    assert len(samples) == 10


@pytest.mark.parametrize("generator_type", ["cnn", "lstm"])
@pytest.mark.parametrize("discriminator_type", ["cnn", "lstm"])
def test_khaos_metrics(generator_type: str, discriminator_type: str):
    X, _ = DatasetTranco(sample_size=1000).raw()

    generator = plugin(
        generator_n_iter=10,
        generator_type=generator_type,
        discriminator_type=discriminator_type,
    )

    score = evaluate_generator(plugin(), X, 2000, 50)

    print(score)