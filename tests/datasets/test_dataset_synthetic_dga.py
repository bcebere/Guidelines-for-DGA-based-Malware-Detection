# third party
import numpy as np
import pytest

# dga_analysis absolute
from dga_analysis.datasets.dataset_synthetic_dga import DatasetSyntheticDGA
from dga_analysis.utils.features.examples import ALL


def test_sanity():
    cnt = 102
    dataset = DatasetSyntheticDGA(sample_size=cnt)
    print("hash", dataset.hash())

    raw_data, raw_labels = dataset.raw()
    assert len(raw_data) == cnt
    assert len(raw_labels) == cnt

    stats_2d, labels = dataset.as_statistical()
    assert len(stats_2d.columns) == len(ALL)
    assert len(stats_2d) == len(raw_data)
    assert len(stats_2d) == len(labels)

    for col in stats_2d.columns:
        if stats_2d[col].isna().sum() == 0:
            continue
        print(col, stats_2d[col].values)


@pytest.mark.parametrize(
    "families",
    [
        ["DictGTrends"],
        ["AppendAttack"],
        ["Khaos"],
        ["AppendAttack", "DeepDGA"],
        [
            "DictSuppoboxTranco",
            "DictSuppoboxEnglish",
            "DictMatsnu",
            "DictGoziTranco",
            "DictGoziEnglish",
            "DictGTrends",
        ],
        ["DictSuppoboxTranco"],
    ],
)
def test_dga_families(families: list):
    dataset = DatasetSyntheticDGA(sample_size=100, families=families)
    print("hash", families, len(dataset), dataset.hash())

    raw_data, raw_labels = dataset.raw()
    assert len(raw_data) == 100
    assert len(raw_labels) == 100

    orig_families = np.asarray(families)
    orig_families.sort()

    actual_families = np.unique(raw_labels)
    actual_families.sort()

    assert np.array_equal(actual_families, orig_families)


@pytest.mark.parametrize(
    "family",
    [
        "DictSuppoboxTranco",
        "DictSuppoboxEnglish",
        "DictMatsnu",
        "DictGoziTranco",
        "DictGoziEnglish",
        "DictGTrends",
    ],
)
def test_dict_dga_sanity(family: str):
    dataset = DatasetSyntheticDGA(sample_size=100, families=[family])
    print("hash", family, dataset.hash())

    raw_data, raw_labels = dataset.raw(only_2ld=True)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100

    filter_unallowed = [x for x in raw_data if " " in x or "." in x]
    assert len(filter_unallowed) == 0


def test_dict_dga():
    dataset = DatasetSyntheticDGA(sample_size=1000, families=["DictSuppoboxTranco"])
    print("hash", dataset.hash())

    raw_data, raw_labels = dataset.raw()
    assert len(raw_data) == 1000
    assert len(raw_labels) == 1000
