# third party
import pytest

# dga_analysis absolute
from dga_analysis.datasets.dataset_tranco import DatasetTranco
from dga_analysis.utils.features.examples import ALL


def test_sanity():
    dataset = DatasetTranco(sample_size=100)

    raw_data, raw_labels = dataset.raw(only_2ld=False)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert (raw_labels == 0).all()

    stats_2d, labels = dataset.as_statistical(only_2ld=False)
    assert len(stats_2d.columns) == len(ALL)
    assert len(stats_2d) == len(raw_data)
    assert len(stats_2d) == len(labels)

    for col in stats_2d.columns:
        if stats_2d[col].isna().sum() == 0:
            continue
        print(col, stats_2d[col].values)


@pytest.mark.parametrize(
    "dataset_timestamp",
    [
        "2019-12-01",
        "2020-06-01",
        "2020-12-01",
        "2021-06-01",
        "2021-12-01",
        "2022-12-01",
        "2023-12-01",
    ],
)
def test_dataset_timestamp(dataset_timestamp):
    dataset = DatasetTranco(
        sample_size=10, dataset_timestamp=dataset_timestamp, shuffle=False
    )

    raw_data, raw_labels = dataset.raw(only_2ld=True)
    print(dataset_timestamp, raw_data)


def test_as_ngrams():
    dataset = DatasetTranco(sample_size=100)

    ngrams, ngrams_labels = dataset.as_ngrams(only_2ld=False)
    raw_data, raw_labels = dataset.raw(only_2ld=False)

    assert len(ngrams) == len(raw_data)
    assert (ngrams_labels == raw_labels).all()
    for idx, ngram in enumerate(ngrams):
        assert isinstance(ngram, list)
        assert len(ngram) == len(raw_data[idx]) - 1


def test_as_embeddings():
    dataset = DatasetTranco(sample_size=100)

    emb_size = 13
    embs, emb_labels = dataset.as_embeddings(only_2ld=False, max_length=emb_size)
    raw_data, raw_labels = dataset.raw(only_2ld=False)

    assert embs.shape == (len(raw_data), emb_size)
    assert (emb_labels == raw_labels).all()
