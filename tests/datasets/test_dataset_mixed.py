# third party
import numpy as np
import pytest
from tldextract import extract

# dga_analysis absolute
from dga_analysis.datasets.dataset_mixed import DatasetMixed
from dga_analysis.utils.features.examples import ALL


def test_sanity_binary():
    dataset = DatasetMixed(sample_size=100, multiclass=False)

    raw_data, raw_labels = dataset.raw(only_2ld=False)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert (np.unique(raw_labels) == np.asarray([0, 1])).all()

    stats_2d, labels = dataset.as_statistical(only_2ld=False)
    assert len(stats_2d.columns) == len(ALL)
    assert len(stats_2d) == len(raw_data)
    assert len(stats_2d) == len(labels)

    for col in stats_2d.columns:
        if stats_2d[col].isna().sum() == 0:
            continue
        print(col, stats_2d[col].values)


def test_sanity_multiclass():
    dataset = DatasetMixed(sample_size=100, multiclass=True)

    raw_data, raw_labels = dataset.raw(only_2ld=False)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert len(np.unique(raw_labels)) > 2

    stats_2d, labels = dataset.as_statistical(only_2ld=False)
    assert len(stats_2d.columns) == len(ALL)
    assert len(stats_2d) == len(raw_data)
    assert len(stats_2d) == len(labels)


@pytest.mark.parametrize("source", ["tranco", "cisco", "alexa", "dgarchive"])
def test_sanity_single_source(source: str):
    dataset = DatasetMixed(sample_size=100, sources={source: 1}, multiclass=False)

    raw_data, raw_labels = dataset.raw(only_2ld=False)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert len(np.unique(raw_labels)) == 1

    stats_2d, labels = dataset.as_statistical(only_2ld=False)
    assert len(stats_2d.columns) == len(ALL)
    assert len(stats_2d) == len(raw_data)
    assert len(stats_2d) == len(labels)


def test_sanity_multisource():
    dataset = DatasetMixed(
        sample_size=100, sources={"tranco": 0.5, "dgarchive": 0.5}, multiclass=False
    )

    raw_data, raw_labels = dataset.raw(only_2ld=False)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert len(np.unique(raw_labels)) == 2

    assert (np.asarray(raw_labels) == 0).sum() == 50
    assert (np.asarray(raw_labels) == 1).sum() == 50


def test_sanity_multisource_families():
    dataset = DatasetMixed(
        sample_size=100,
        sources={"tranco": 0.5, "dgarchive": 0.5},
        multiclass=True,
        dga_families=["monerominer_dga", "matsnu_dga"],
    )

    raw_data, raw_labels = dataset.raw(only_2ld=False)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert len(np.unique(raw_labels)) == 3

    assert (np.asarray(raw_labels) == "benign").sum() == 50
    assert np.array_equal(
        np.unique(raw_labels), np.asarray(["benign", "matsnu_dga", "monerominer_dga"])
    )


def test_sanity_multisource_synthetic():
    dataset = DatasetMixed(
        sample_size=100,
        sources={"tranco": 0.5, "synthetic_dga": 0.5},
        multiclass=True,
        dga_families=["MaskDGA", "DeepDGA"],
    )

    raw_data, raw_labels = dataset.raw(only_2ld=False)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert len(np.unique(raw_labels)) == 3

    assert (np.asarray(raw_labels) == "benign").sum() == 50
    assert np.array_equal(
        sorted(np.unique(raw_labels)), np.asarray(["DeepDGA", "MaskDGA", "benign"])
    )


def test_sanity_2ld():
    dataset = DatasetMixed(sample_size=100, multiclass=False)

    raw_data, raw_labels = dataset.raw(only_2ld=True)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert all("." not in x for x in raw_data)


def test_sanity_2ld_edge_case():
    dyndns = ["co", "cz", "ddns", "dyndns"]
    dataset = DatasetMixed(sample_size=10000)

    filtered_data, _ = dataset.raw(only_2ld=True)
    raw_data, _ = dataset.raw(only_2ld=False)

    assert len(filtered_data) == len(raw_data)

    tested = False
    for idx, sample in enumerate(raw_data):
        dot_cnt = len(sample.split("."))
        if dot_cnt > 2:
            tokens = extract(sample)
            token = tokens.domain
            if token in dyndns:
                token = tokens.subdomain
            assert token == filtered_data[idx]
            tested = True

    assert tested
