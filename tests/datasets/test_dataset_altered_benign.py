# third party
import numpy as np
import pytest

# dga_analysis absolute
from dga_analysis.datasets.dataset_altered_benign import DatasetAltered
from dga_analysis.datasets.dataset_mixed import DatasetMixed
from dga_analysis.utils.features.examples import ALL


@pytest.mark.parametrize("strategy", ["permutation", "alter_char", "reverse"])
def test_sanity(strategy: str):
    dataset = DatasetAltered(sample_size=100, strategy=strategy)

    raw_data, raw_labels = dataset.raw(only_2ld=False)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert (np.unique(raw_labels) == np.asarray([f"{strategy}_dga"])).all()

    stats_2d, labels = dataset.as_statistical(only_2ld=False)
    assert len(stats_2d.columns) == len(ALL)
    assert len(stats_2d) == len(raw_data)
    assert len(stats_2d) == len(labels)

    for col in stats_2d.columns:
        if stats_2d[col].isna().sum() == 0:
            continue


@pytest.mark.parametrize("source", ["tranco", "cisco", "alexa"])
@pytest.mark.parametrize("strategy", ["permutation", "alter_char", "reverse"])
def test_sanity_source(source: str, strategy: str):
    dataset = DatasetAltered(
        sample_size=100, strategy=strategy, source=source, shuffle=False
    )

    raw_data, raw_labels = dataset.raw(only_2ld=False)
    assert len(raw_data) == 100
    assert len(raw_labels) == 100
    assert len(np.unique(raw_labels)) == 1

    stats_2d, labels = dataset.as_statistical(only_2ld=False)
    assert len(stats_2d.columns) == len(ALL)
    assert len(stats_2d) == len(raw_data)
    assert len(stats_2d) == len(labels)

    ref_data = DatasetMixed(
        sample_size=1000, sources={"tranco": 0.3, "cisco": 0.3, "alexa": 0.3}
    )
    ref_domains, _ = ref_data.raw(only_2ld=False)

    print(ref_domains[:5], raw_data[:5])
    assert len(set(raw_data) & set(ref_domains)) == 0


@pytest.mark.parametrize("source", ["dgarchive"])
def test_sanity_source_fail(source: str):
    with pytest.raises(AssertionError):
        DatasetAltered(sample_size=100, source=source)
