# third party
import numpy as np
import pytest

# dga_analysis absolute
from dga_analysis.datasets.dataset_dgarchive import DatasetDGArchive
from dga_analysis.utils.features.examples import ALL


def test_sanity():
    dataset = DatasetDGArchive(sample_size=100)
    print("sanity", dataset.hash())

    raw_data, raw_labels = dataset.raw()
    assert len(raw_data) == 100
    assert len(raw_labels) == 100

    stats_2d, labels = dataset.as_statistical()
    assert len(stats_2d.columns) == len(ALL)
    assert len(stats_2d) == len(raw_data)
    assert len(stats_2d) == len(labels)

    for col in stats_2d.columns:
        if stats_2d[col].isna().sum() == 0:
            continue
        print(col, stats_2d[col].values)


@pytest.mark.parametrize("year", [2007, 2015, 2019])
def test_sanity_by_year(year):
    dataset = DatasetDGArchive(sample_size=100, filter_by_years=[year])

    raw_data, raw_labels = dataset.raw()
    print(year, raw_data[:20])


@pytest.mark.parametrize("families", [["suppobox_dga"], ["matsnu_dga", "suppobox_dga"]])
def test_dga_families(families: list):
    dataset = DatasetDGArchive(sample_size=100, families=families)
    print("family", dataset.hash())

    raw_data, raw_labels = dataset.raw()
    assert len(raw_data) == 100
    assert len(raw_labels) == 100

    assert np.array_equal(np.unique(raw_labels), np.asarray(families))
