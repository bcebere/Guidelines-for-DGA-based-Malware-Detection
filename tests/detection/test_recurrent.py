# third party
import pytest

# dga_analysis absolute
from dga_analysis.datasets.dataset_mixed import DatasetMixed

# tls_fingerprinting absolute
from dga_analysis.detection.recurrent import LSTMClassifier
from dga_analysis.detection.recurrent import RecurrentClassifier as plugin
from dga_analysis.utils.evaluation import evaluate_classifier


@pytest.mark.parametrize("model_name", ["lstm", "rnn", "gru"])
def test_recurrent_plugin_sanity(model_name: str) -> None:
    test_plugin = plugin(model_name)
    assert test_plugin is not None


@pytest.mark.parametrize("multiclass", [False, True])
@pytest.mark.parametrize("model_name", ["rnn", "gru", "lstm"])
def test_recurrent_plugin_fit(multiclass: bool, model_name: str) -> None:
    test_plugin = plugin(
        model_name=model_name,
        n_layers=1,
        n_units_emb=51,
        n_units_hidden=41,
        n_iter=2,
    )
    dataset = DatasetMixed(sample_size=5000, multiclass=multiclass)
    X, y = dataset.raw_np()

    test_plugin.fit(X, y)


def test_recurrent_plugin_fit_dedicated() -> None:
    test_plugin = LSTMClassifier(
        n_layers=1,
        n_units_emb=51,
        n_units_hidden=41,
        n_iter=2,
    )
    dataset = DatasetMixed(sample_size=5000)
    X, y = dataset.raw_np()

    test_plugin.fit(X, y)


@pytest.mark.parametrize("multiclass", [True, False])
@pytest.mark.parametrize("model_name", ["lstm", "rnn", "gru"])
def test_recurrent_plugin_fit_predict_dga(multiclass: bool, model_name: str) -> None:
    test_plugin = plugin(
        model_name=model_name,
        n_layers=1,
        n_units_emb=50,
        n_units_hidden=50,
        n_iter=100,
    )
    dataset = DatasetMixed(sample_size=5000, multiclass=multiclass)
    X, y = dataset.raw_np()

    scores = evaluate_classifier(test_plugin, X, y)
    print(scores["str"])
