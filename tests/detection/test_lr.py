# third party
import numpy as np
import pandas as pd
import pytest
from sklearn.datasets import load_iris

# dga_analysis absolute
from dga_analysis.datasets.dataset_mixed import DatasetMixed

# tls_fingerprinting absolute
from dga_analysis.detection.lr import LinearClassifier as plugin
from dga_analysis.utils.evaluation import evaluate_classifier


def test_lr_plugin_sanity() -> None:
    test_plugin = plugin()
    assert test_plugin is not None


def test_lr_plugin_fit_predict_proba() -> None:
    test_plugin = plugin()
    X, y = load_iris(return_X_y=True, as_frame=True)
    scores = evaluate_classifier(test_plugin, X, y)
    print(scores["str"])


@pytest.mark.parametrize("multiclass", [False, True])
def test_lr_plugin_fit_predict_dga(multiclass: bool) -> None:
    test_plugin = plugin()
    dataset = DatasetMixed(sample_size=5000, multiclass=multiclass)
    X, y = dataset.as_statistical()

    scores = evaluate_classifier(test_plugin, X, y)
    print(scores["str"])


def test_lr_plugin_fit_predict_dga_hard() -> None:
    test_plugin = plugin()
    dataset = DatasetMixed(sample_size=5000, dga_families=["matsnu_dga"])
    X, y = dataset.as_statistical()

    scores = evaluate_classifier(test_plugin, X, y)
    print(scores["str"])


def test_lr_plugin_feature_importance() -> None:
    test_plugin = plugin()
    dataset = DatasetMixed(sample_size=5000)
    X, y = dataset.as_statistical()

    test_plugin.fit(X, y)
    coefficients = test_plugin.model.coef_[0]

    feature_importance = pd.DataFrame(
        {"Feature": X.columns, "Importance": np.abs(coefficients)}
    )
    feature_importance = feature_importance[feature_importance["Importance"] > 0]
    feature_importance = feature_importance.sort_values("Importance", ascending=False)

    print(feature_importance.head(10))
