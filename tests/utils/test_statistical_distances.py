# third party
import pytest

# dga_analysis absolute
from dga_analysis.datasets.dataset_cisco import DatasetCisco
from dga_analysis.datasets.dataset_dgarchive import DatasetDGArchive
from dga_analysis.datasets.dataset_tranco import DatasetTranco
from dga_analysis.utils.statistical_distances import DISTANCES, StatisticalDistances


def test_sanity():
    evaluator = StatisticalDistances()
    assert evaluator is not None


@pytest.mark.parametrize("distance", DISTANCES)
def test_distance(distance: str):
    evaluator = StatisticalDistances(distances=[distance], emb_size=51)
    assert evaluator is not None

    sample_size = 100
    benign1 = DatasetTranco(sample_size=sample_size)
    benign2 = DatasetCisco(sample_size=sample_size)
    mal = DatasetDGArchive(sample_size=sample_size, families=["mydoom_dga"])

    scores_ben = evaluator.evaluate(benign1, benign2)
    scores_mal = evaluator.evaluate(benign1, mal)

    assert distance in scores_ben
    assert distance in scores_mal
    print(distance, scores_ben, scores_mal)


@pytest.mark.parametrize(
    "family", ["mydoom_dga", "matsnu_dga", "gozi_dga", "dnsbenchmark_dga"]
)
def test_distances(family: str):
    evaluator = StatisticalDistances()
    assert evaluator is not None

    sample_size = 100

    benign1 = DatasetTranco(sample_size=sample_size)
    mal = DatasetDGArchive(sample_size=sample_size, families=[family])

    scores_mal = evaluator.evaluate(benign1, mal)
    for distance in DISTANCES:
        assert distance in scores_mal
    print(family, scores_mal)
