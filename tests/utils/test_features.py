# stdlib
from typing import Callable, List

# third party
import pytest
from scipy.sparse import coo_matrix, spmatrix

# dga_analysis absolute
from dga_analysis.utils.extraction import FeatureExtraction
from dga_analysis.utils.features.examples import ALL

DEMO_SAMPLES = [
    "cispa.de",
    "cispa.saarland",
    "example.com",
    "example.edu",
    "example.net",
    "example.org",
    "www.cispa.de",
    "www.cispa.saarland",
    "www.example.com",
    "www.example.edu",
    "www.example.net",
    "www.example.org",
    "www.dksnvsdnvisdnvisdmcv.sdf",
]


def test_extraction() -> None:
    fe = FeatureExtraction(features=ALL, n_jobs=1, verbose=False)
    assert fe is not None

    fe.fit()
    X = fe.transform(DEMO_SAMPLES)
    assert X is not None
    assert X.get_shape() == (len(DEMO_SAMPLES), len(ALL))

    print(str(fe.get_feature_names()))


@pytest.mark.parametrize("feature", ALL)
def test_selected_features(feature: Callable) -> None:
    out = _test_feature(feature, DEMO_SAMPLES)
    coo_mat = coo_matrix(out)
    assert coo_mat.shape == (len(DEMO_SAMPLES), 1)


def _test_feature(feature: Callable, samples: List) -> spmatrix:
    fe = FeatureExtraction(features=[feature], n_jobs=1, verbose=False)
    assert fe is not None

    fe.fit()
    X = fe.transform(samples)
    assert X is not None
    assert X.get_shape() == (len(samples), 1)

    return X
