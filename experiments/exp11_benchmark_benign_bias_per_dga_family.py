#!/usr/bin/env python
# coding: utf-8

# In[1]:


# stdlib
from pathlib import Path
from random import shuffle

# third party
import numpy as np
import pandas as pd
from joblib import Parallel, delayed

# dga_analysis absolute
from dga_analysis.datasets.dataset_altered_benign import STRATEGIES
from dga_analysis.datasets.dataset_dgarchive import FAMILIES as DGA_FAMILIES
from dga_analysis.datasets.dataset_mixed import DatasetMixed
from dga_analysis.datasets.dataset_synthetic_dga import FAMILIES as SYN_FAMILIES
from dga_analysis.datasets.dataset_tranco import DatasetTranco
from dga_analysis.detection.cnn import CNNClassifier
from dga_analysis.detection.ji import JIClassifier
from dga_analysis.detection.lr import LinearClassifier
from dga_analysis.detection.nn import NeuralNetClassifier
from dga_analysis.detection.recurrent import (
    GRUClassifier,
    LSTMClassifier,
    RNNClassifier,
)
from dga_analysis.detection.rescnn import ResCNNClassifier
from dga_analysis.detection.rf import RFClassifier
from dga_analysis.detection.svm import SVMClassifier
from dga_analysis.detection.transformer import TransformerClassifier
from dga_analysis.detection.tree import DecisionTreeClassifier
from dga_analysis.detection.xgb import XGBoostClassifier
from dga_analysis.utils.serialization import (
    dataframe_hash,
    load_from_file,
    save_to_file,
)

SAMPLE_SIZE = 40000
DGA_SUBSAMPLES = 20000
WORKSPACE = Path("workspace")
WORKSPACE.mkdir(parents=True, exist_ok=True)

MULTICLASS = False
MODELS_2D = [
    "rf",
    "lr",
    # "svm",
    "xgb",
    "tree",
    "nn",
]

MODELS_3D = [
    # "rnn",
    # "lstm",
    # "gru",
    # "transformer",
    # "cnn",
    # "rescnn",
    # "ji",
]

TEST_DATA = DatasetTranco(sample_size=200000, shuffle=False)
Xtest_raw, ytest = TEST_DATA.raw_np(only_2ld=True)
Xtest_embs, ytest = TEST_DATA.as_embeddings(only_2ld=True)
Xtest_stats, ytest = TEST_DATA.as_statistical(only_2ld=True)


def load_model(model: str):
    if model == "rf":
        return RFClassifier()
    elif model == "lr":
        return LinearClassifier()
    elif model == "svm":
        return SVMClassifier()
    elif model == "xgb":
        return XGBoostClassifier()
    elif model == "tree":
        return DecisionTreeClassifier()
    elif model == "nn":
        return NeuralNetClassifier(
            n_layers_hidden=2,
            n_units_hidden=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "cnn":
        return CNNClassifier(
            n_units_emb=256,
            n_iter=1000,
        )
    elif model == "ji":
        return JIClassifier()
    elif model == "transformer":
        return TransformerClassifier(
            n_layers=2,
            n_units_emb=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "lstm":
        return LSTMClassifier(
            n_layers=2,
            n_units_emb=200,
            n_units_hidden=200,
            dropout=0,
            n_iter=1000,
        )
    elif model == "rnn":
        return RNNClassifier(
            n_layers=2,
            n_units_emb=200,
            n_units_hidden=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "gru":
        return GRUClassifier(
            n_layers=2,
            n_units_emb=200,
            n_units_hidden=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "rescnn":
        return ResCNNClassifier(
            n_units_emb=256,
            dropout=0.1,
            n_iter=1000,
        )
    else:
        raise NotImplementedError(model)


def load_dgarchive_family(
    family: str,
    scenario: str,
    max_benign_source: int = 100000,
    max_dga_source: int = 100000,
):
    dataset = DatasetMixed(
        sample_size=SAMPLE_SIZE,
        sources={"tranco": 0.5, "dgarchive": 0.5},
        multiclass=MULTICLASS,
        dga_families=[family],
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
        shuffle=False,
    )

    if scenario == "stats":
        return dataset.as_statistical(only_2ld=True)
    elif scenario == "embs":
        return dataset.as_embeddings(only_2ld=True)
    else:
        return dataset.raw(only_2ld=True)


def benchmark_family_2d(family: str, scenario: str, X, y):
    if scenario == "raw":
        models = MODELS_3D
        Xtest = Xtest_raw
    elif scenario == "embs":
        models = MODELS_2D
        Xtest = Xtest_embs
    else:
        models = MODELS_2D
        Xtest = Xtest_stats

    X = np.asarray(X)

    data_hash = dataframe_hash(pd.DataFrame(X))

    for model_name in models:
        cache_file = WORKSPACE / f"benchmarks_btopn_bias_{model_name}_{data_hash}.bkp"
        if cache_file.exists():
            scores = load_from_file(cache_file)
            print(
                "cached",
                family,
                model_name,
                np.sum(scores),
                flush=True,
            )
            continue

        try:
            model = load_model(model_name)
            model.fit(X, y)
            scores = model.predict(Xtest)
            save_to_file(cache_file, scores)
            print(
                "computed",
                family,
                model_name,
                np.sum(scores),
                flush=True,
            )
        except BaseException as e:
            print("failed", family, model_name, e, flush=True)
            continue


def benchmark_dgarchive_2d(
    family: str,
    scenario: str,
    max_benign_source: int = 100000,
    max_dga_source: int = 100000,
):
    X, y = load_dgarchive_family(
        family,
        scenario=scenario,
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )
    benchmark_family_2d(family, scenario, X, y)


def load_synthetic_family(
    family: str,
    scenario: str = "stats",
    max_benign_source: int = 100000,
    max_dga_source: int = 10000,
):  # stats, embs, raw
    dataset = DatasetMixed(
        sample_size=SAMPLE_SIZE,
        sources={"tranco": 0.5, "synthetic_dga": 0.5},
        multiclass=MULTICLASS,
        dga_families=[family],
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
        shuffle=False,
    )

    if scenario == "stats":
        return dataset.as_statistical(only_2ld=True)
    elif scenario == "embs":
        return dataset.as_embeddings(only_2ld=True, max_length=100)
    else:
        return dataset.raw(only_2ld=True)


def benchmark_synthetic(
    family: str,
    scenario: str,
    max_benign_source: int = 100000,
    max_dga_source: int = 10000,
):
    X, y = load_synthetic_family(
        family,
        scenario=scenario,
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )
    benchmark_family_2d(family, scenario, X, y)


def load_altered_family(
    strategy: str, scenario: str, max_benign_source: int, max_dga_source: int
):
    dataset = DatasetMixed(
        sample_size=SAMPLE_SIZE,
        sources={"tranco": 0.5, "altered_benign": 0.5},
        dga_families=[strategy],
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
        shuffle=False,
    )

    if scenario == "stats":
        return dataset.as_statistical(only_2ld=True)
    elif scenario == "embs":
        return dataset.as_embeddings(only_2ld=True)
    else:
        return dataset.raw(only_2ld=True)


def benchmark_altered_2d(
    strategy: str,
    scenario: str,
    max_benign_source: int = 100000,
    max_dga_source: int = 100000,
):
    X, y = load_altered_family(
        strategy,
        scenario=scenario,
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )
    benchmark_family_2d(strategy, scenario, X, y)


BENIGN_SUBSAMPLES = [100, 1000, 10000, 20000, 50000]


parallel = Parallel(n_jobs=10)
SCENARIOS = ["stats", "raw"]
SCENARIOS = ["embs", "raw"]

for benign_size in BENIGN_SUBSAMPLES:
    for scenario in SCENARIOS:
        for strategy in STRATEGIES:
            benchmark_altered_2d(
                strategy,
                scenario=scenario,
                max_benign_source=benign_size,
                max_dga_source=DGA_SUBSAMPLES,
            )

shuffle(SYN_FAMILIES)
shuffle(SYN_FAMILIES)
results = parallel(
    delayed(benchmark_synthetic)(
        family,
        scenario=scenario,
        max_benign_source=benign_size,
        max_dga_source=DGA_SUBSAMPLES,
    )
    for family in SYN_FAMILIES
    for scenario in SCENARIOS
    for benign_size in BENIGN_SUBSAMPLES
)

shuffle(DGA_FAMILIES)
shuffle(DGA_FAMILIES)
results = parallel(
    delayed(benchmark_dgarchive_2d)(
        family,
        scenario=scenario,
        max_benign_source=benign_size,
        max_dga_source=DGA_SUBSAMPLES,
    )
    for family in DGA_FAMILIES
    for scenario in SCENARIOS
    for benign_size in BENIGN_SUBSAMPLES
)
