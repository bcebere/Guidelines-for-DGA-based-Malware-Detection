# stdlib
from pathlib import Path
from random import shuffle

# third party
import numpy as np
import pandas as pd
from joblib import Parallel, delayed

# dga_analysis absolute
from dga_analysis.datasets.dataset_altered_benign import STRATEGIES
from dga_analysis.datasets.dataset_dgarchive import FAMILIES as DGA_FAMILIES
from dga_analysis.datasets.dataset_mixed import DatasetMixed
from dga_analysis.datasets.dataset_synthetic_dga import FAMILIES as SYN_FAMILIES
from dga_analysis.detection.cnn import CNNClassifier
from dga_analysis.detection.ji import JIClassifier
from dga_analysis.detection.lr import LinearClassifier
from dga_analysis.detection.nn import NeuralNetClassifier
from dga_analysis.detection.recurrent import (
    GRUClassifier,
    LSTMClassifier,
    RNNClassifier,
)
from dga_analysis.detection.rescnn import ResCNNClassifier
from dga_analysis.detection.rf import RFClassifier
from dga_analysis.detection.svm import SVMClassifier
from dga_analysis.detection.transformer import TransformerClassifier
from dga_analysis.detection.tree import DecisionTreeClassifier
from dga_analysis.detection.xgb import XGBoostClassifier
from dga_analysis.utils.evaluation import evaluate_classifier
from dga_analysis.utils.serialization import (
    dataframe_hash,
    load_from_file,
    save_to_file,
)

SAMPLE_SIZE = 40000
BENIGN_SUBSAMPLES = 20000
DGA_SUBSAMPLES = 20000

WORKSPACE = Path("workspace")
WORKSPACE.mkdir(parents=True, exist_ok=True)

MULTICLASS = False

MODELS_2D = [
    "rf",
    "lr",
    # "svm",
    "xgb",
    "tree",
    # "nn",
]

MODELS_3D = [
    # "rnn",
    "lstm",
    # "gru",
    "transformer",
    "cnn",
    "rescnn",
    "ji",
]


def load_model(model: str):
    if model == "rf":
        return RFClassifier()
    elif model == "lr":
        return LinearClassifier()
    elif model == "svm":
        return SVMClassifier()
    elif model == "xgb":
        return XGBoostClassifier()
    elif model == "tree":
        return DecisionTreeClassifier()
    elif model == "nn":
        return NeuralNetClassifier(
            n_layers=2,
            n_units_hidden=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "cnn":
        return CNNClassifier(
            n_units_emb=256,
            n_iter=1000,
        )
    elif model == "ji":
        return JIClassifier()
    elif model == "transformer":
        return TransformerClassifier(
            n_layers=1,
            n_units_emb=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "lstm":
        return LSTMClassifier(
            n_layers=1,
            n_units_emb=200,
            n_units_hidden=200,
            dropout=0,
            n_iter=1000,
        )
    elif model == "rnn":
        return RNNClassifier(
            n_layers=2,
            n_units_emb=200,
            n_units_hidden=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "gru":
        return GRUClassifier(
            n_layers=2,
            n_units_emb=200,
            n_units_hidden=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "rescnn":
        return ResCNNClassifier(
            n_units_emb=256,
            dropout=0.1,
            n_iter=1000,
        )
    else:
        raise NotImplementedError(model)


def load_dgarchive_family(
    family: str,
    scenario: str,
    max_benign_source: int = 100000,
    max_dga_source: int = 100000,
    benign_source: str = "tranco",
):
    dataset = DatasetMixed(
        sample_size=SAMPLE_SIZE,
        sources={benign_source: 0.5, "dgarchive": 0.5},
        multiclass=MULTICLASS,
        dga_families=[family],
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )

    if scenario == "stats":
        return dataset.as_statistical(only_2ld=True)
    elif scenario == "embs":
        return dataset.as_embeddings(only_2ld=True)
    else:
        return dataset.raw(only_2ld=True)


def benchmark_family_2d(
    scenario: str, family_train: str, family_test: str, X_train, y_train, X_test, y_test
):
    if scenario == "raw":
        models = MODELS_3D
    else:
        models = MODELS_2D
    X_train = np.asarray(X_train)
    X_test = np.asarray(X_test)

    train_hash = dataframe_hash(pd.DataFrame(X_train))
    test_hash = dataframe_hash(pd.DataFrame(X_test))

    for model_name in models:
        cache_file = (
            WORKSPACE
            / f"benchmarks_cross_{model_name}_{train_hash}_{test_hash}_{len(np.unique(y_train))}.v2.bkp"
        )
        if cache_file.exists():
            scores = load_from_file(cache_file)
            print(
                family_train,
                family_test,
                scenario,
                model_name,
                scores["str"],
                flush=True,
            )
            continue

        try:
            n_folds = 3
            model = load_model(model_name)
            model.fit(X_train, y_train)
            scores = evaluate_classifier(
                [model] * n_folds, X_test, y_test, pretrained=True, n_folds=n_folds
            )
            save_to_file(cache_file, scores)
            print(
                family_train,
                family_test,
                scenario,
                model_name,
                scores["str"],
                flush=True,
            )
        except BaseException as e:
            print("failed", family_train, family_test, model_name, e, flush=True)
            continue


def load_synthetic_family(
    family: str,
    scenario: str = "stats",
    max_benign_source: int = 100000,
    max_dga_source: int = 10000,
    benign_source: str = "tranco",
):  # stats, embs, raw
    dataset = DatasetMixed(
        sample_size=SAMPLE_SIZE,
        sources={benign_source: 0.5, "synthetic_dga": 0.5},
        multiclass=MULTICLASS,
        dga_families=[family],
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )

    if scenario == "stats":
        return dataset.as_statistical(only_2ld=True)
    elif scenario == "embs":
        return dataset.as_embeddings(only_2ld=True, max_length=100)
    else:
        return dataset.raw(only_2ld=True)


def load_altered_family(
    strategy: str,
    scenario: str,
    max_benign_source: int,
    max_dga_source: int,
    benign_source: str = "tranco",
):
    dataset = DatasetMixed(
        sample_size=SAMPLE_SIZE,
        sources={benign_source: 0.5, "altered_benign": 0.5},
        dga_families=[strategy],
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )

    if scenario == "stats":
        return dataset.as_statistical(only_2ld=True)
    elif scenario == "embs":
        return dataset.as_embeddings(only_2ld=True)
    else:
        return dataset.raw(only_2ld=True)


def benchmark_target(train_family, scenario, X_train, y_train):
    for test_strategy in STRATEGIES:
        if train_family == test_strategy:
            continue

        X_test, y_test = load_altered_family(
            test_strategy,
            scenario=scenario,
            max_benign_source=BENIGN_SUBSAMPLES,
            max_dga_source=DGA_SUBSAMPLES,
            benign_source="cisco",
        )
        print(
            "benchmark ",
            train_family,
            test_strategy,
            pd.Series(y_train).value_counts(),
            pd.Series(y_test).value_counts(),
        )
        benchmark_family_2d(
            scenario, train_family, test_strategy, X_train, y_train, X_test, y_test
        )

    for test_family in SYN_FAMILIES:
        if train_family == test_family:
            continue
        X_test, y_test = load_synthetic_family(
            test_family,
            scenario=scenario,
            max_benign_source=BENIGN_SUBSAMPLES,
            max_dga_source=DGA_SUBSAMPLES,
            benign_source="cisco",
        )
        print(
            "benchmark ",
            train_family,
            test_family,
            pd.Series(y_train).value_counts(),
            pd.Series(y_test).value_counts(),
        )
        benchmark_family_2d(
            scenario, train_family, test_family, X_train, y_train, X_test, y_test
        )

    for test_family in DGA_FAMILIES:
        if train_family == test_family:
            continue

        X_test, y_test = load_dgarchive_family(
            test_family,
            scenario=scenario,
            max_benign_source=BENIGN_SUBSAMPLES,
            max_dga_source=DGA_SUBSAMPLES,
            benign_source="cisco",
        )
        print(
            "benchmark ",
            train_family,
            test_family,
            pd.Series(y_train).value_counts(),
            pd.Series(y_test).value_counts(),
        )
        benchmark_family_2d(
            scenario, train_family, test_family, X_train, y_train, X_test, y_test
        )


def benchmark_dgarchive_2d(
    family: str,
    scenario: str,
    max_benign_source: int = 100000,
    max_dga_source: int = 100000,
):
    X_train, y_train = load_dgarchive_family(
        family,
        scenario=scenario,
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )
    benchmark_target(family, scenario, X_train, y_train)


def benchmark_synthetic(
    family: str,
    scenario: str,
    max_benign_source: int = 100000,
    max_dga_source: int = 10000,
):
    X_train, y_train = load_synthetic_family(
        family,
        scenario=scenario,
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )
    benchmark_target(family, scenario, X_train, y_train)


def benchmark_altered_2d(
    strategy: str,
    scenario: str,
    max_benign_source: int = 100000,
    max_dga_source: int = 100000,
):
    X_train, y_train = load_altered_family(
        strategy,
        scenario=scenario,
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )
    benchmark_target(strategy, scenario, X_train, y_train)


parallel = Parallel(n_jobs=1)
SCENARIOS = ["embs", "stats"]
SCENARIOS = ["raw"]

shuffle(DGA_FAMILIES)
results = parallel(
    delayed(benchmark_dgarchive_2d)(
        family,
        scenario=scenario,
        max_benign_source=BENIGN_SUBSAMPLES,
        max_dga_source=DGA_SUBSAMPLES,
    )
    for family in DGA_FAMILIES
    for scenario in SCENARIOS
)

shuffle(SYN_FAMILIES)
results = parallel(
    delayed(benchmark_synthetic)(
        family,
        scenario=scenario,
        max_benign_source=BENIGN_SUBSAMPLES,
        max_dga_source=DGA_SUBSAMPLES,
    )
    for family in SYN_FAMILIES
    for scenario in SCENARIOS
)

for scenario in SCENARIOS:
    for strategy in STRATEGIES:
        benchmark_altered_2d(
            strategy,
            scenario=scenario,
            max_benign_source=BENIGN_SUBSAMPLES,
            max_dga_source=DGA_SUBSAMPLES,
        )
