# stdlib
from pathlib import Path
from random import shuffle

# third party
from joblib import Parallel, delayed

# dga_analysis absolute
from dga_analysis.datasets.dataset_alexa import DatasetAlexa
from dga_analysis.datasets.dataset_altered_benign import STRATEGIES, DatasetAltered
from dga_analysis.datasets.dataset_cisco import DatasetCisco
from dga_analysis.datasets.dataset_dgarchive import FAMILIES, DatasetDGArchive
from dga_analysis.datasets.dataset_synthetic_dga import FAMILIES as SYN_FAMILIES
from dga_analysis.datasets.dataset_synthetic_dga import DatasetSyntheticDGA
from dga_analysis.datasets.dataset_tranco import DatasetTranco
from dga_analysis.utils.statistical_distances import StatisticalDistances

SAMPLE_SIZE = 50000
only_2ld = True


X_benign = DatasetTranco(
    sample_size=SAMPLE_SIZE,
)
X_alexa = DatasetAlexa(
    sample_size=SAMPLE_SIZE,
)
X_cisco = DatasetCisco(
    sample_size=SAMPLE_SIZE,
)

X_benign.raw_df(only_2ld=only_2ld)["domain"].value_counts()


WORKSPACE = Path("workspace")
WORKSPACE.mkdir(parents=True, exist_ok=True)


fontsize = 18


def load_dgarchive_family(family: str):
    return DatasetDGArchive(
        sample_size=SAMPLE_SIZE,
        max_source_size=SAMPLE_SIZE,
        families=[family],
    )


def load_all_dgarchive_families():
    return DatasetDGArchive(
        sample_size=SAMPLE_SIZE,
        max_source_size=1000,
    )


def compute_distance(left_data, left_label, right_data, right_label):
    evaluator = StatisticalDistances()
    res = evaluator.evaluate(left_data, right_data)
    print("distance", left_label, right_label, res, flush=True)

    return res


def process_dgarchive_family(family: str):
    print("evaluate family", family, flush=True)
    try:
        X_mal = load_dgarchive_family(family)

        compute_distance(
            X_benign,
            "Benign: Tranco",
            X_mal,
            f"DGA: {family}",
        )
    except BaseException:
        print("family failed", family, flush=True)

    return 0


def load_synthetic_family(family: str):
    return DatasetSyntheticDGA(
        sample_size=SAMPLE_SIZE,
        max_source_size=SAMPLE_SIZE,
        families=[family],
    )


def process_synthetic_family(family: str):
    print("evaluate family", family, flush=True)
    try:
        X_mal = load_synthetic_family(family)

        compute_distance(
            X_benign,
            "Benign: Tranco",
            X_mal,
            f"DGA: {family}",
        )
    except BaseException:
        print("family failed", family, flush=True)

    return 0


def load_altered_family(strategy: str):
    return DatasetAltered(
        sample_size=SAMPLE_SIZE,
        strategy=strategy,
    )


def process_altered_family(strategy: str):
    print("evaluate family", strategy, flush=True)
    try:
        X_mal = load_altered_family(strategy)

        compute_distance(
            X_benign,
            "Benign: Tranco",
            X_mal,
            f"Tranco + {strategy}",
        )
    except BaseException:
        print("family failed", strategy, flush=True)
        raise

    return 0


print("Evaluate Altered", STRATEGIES)
parallel = Parallel(n_jobs=10)
results = parallel(delayed(process_altered_family)(family) for family in STRATEGIES)


shuffle(FAMILIES)
shuffle(FAMILIES)

parallel = Parallel(n_jobs=10)
results = parallel(delayed(process_dgarchive_family)(family) for family in FAMILIES)


# ## Plot against all DGA families
X_mal = load_all_dgarchive_families()

tranco_vs_all_dga = compute_distance(
    X_benign,
    "Tranco",
    X_mal,
    "DGArchive",
)
tranco_vs_all_dga

# dga_analysis absolute

# third party
tranco_alexa_baseline = compute_distance(
    X_benign,
    "Tranco",
    X_alexa,
    "Alexa",
)
tranco_alexa_baseline


# In[ ]:


tranco_cisco_baseline = compute_distance(
    X_benign,
    "Tranco",
    X_cisco,
    "Cisco",
)
tranco_cisco_baseline

print("Evaluate synthetic", SYN_FAMILIES)
parallel = Parallel(n_jobs=10)
results = parallel(delayed(process_synthetic_family)(family) for family in SYN_FAMILIES)
