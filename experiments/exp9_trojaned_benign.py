# stdlib
from pathlib import Path
from random import shuffle

# third party
import numpy as np
import pandas as pd
from joblib import Parallel, delayed

# dga_analysis absolute
from dga_analysis.datasets.dataset_altered_benign import STRATEGIES
from dga_analysis.datasets.dataset_dgarchive import FAMILIES as DGA_FAMILIES
from dga_analysis.datasets.dataset_mixed import DatasetMixed
from dga_analysis.datasets.dataset_synthetic_dga import FAMILIES as SYN_FAMILIES
from dga_analysis.detection.cnn import CNNClassifier
from dga_analysis.detection.ji import JIClassifier
from dga_analysis.detection.lr import LinearClassifier
from dga_analysis.detection.nn import NeuralNetClassifier
from dga_analysis.detection.recurrent import (
    GRUClassifier,
    LSTMClassifier,
    RNNClassifier,
)
from dga_analysis.detection.rescnn import ResCNNClassifier
from dga_analysis.detection.rf import RFClassifier
from dga_analysis.detection.svm import SVMClassifier
from dga_analysis.detection.transformer import TransformerClassifier
from dga_analysis.detection.tree import DecisionTreeClassifier
from dga_analysis.detection.xgb import XGBoostClassifier
from dga_analysis.utils.evaluation import evaluate_classifier
from dga_analysis.utils.serialization import (
    dataframe_hash,
    load_from_file,
    save_to_file,
)

SAMPLE_SIZE = 150000
BENIGN_SUBSAMPLES = 20000
DGA_SUBSAMPLES = 20000
CORRUPTED_PCT = [0.001, 0.005, 0.01, 0.05, 0.1, 0.2, 0.3, 0.5]

WORKSPACE = Path("workspace")
WORKSPACE.mkdir(parents=True, exist_ok=True)

MULTICLASS = False

MODELS_2D = [
    "rf",
    "lr",
    # "svm",
    "xgb",
    "tree",
    # "nn",
]

MODELS_3D = [
    # "rnn",
    # "lstm",
    # "gru",
    # "transformer",
    # "cnn",
    "rescnn",
    # "ji",
]


def load_model(model: str):
    if model == "rf":
        return RFClassifier()
    elif model == "lr":
        return LinearClassifier()
    elif model == "svm":
        return SVMClassifier()
    elif model == "xgb":
        return XGBoostClassifier()
    elif model == "tree":
        return DecisionTreeClassifier()
    elif model == "nn":
        return NeuralNetClassifier(
            n_layers=2,
            n_units_hidden=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "cnn":
        return CNNClassifier(
            n_units_emb=256,
            n_iter=1000,
        )
    elif model == "ji":
        return JIClassifier()
    elif model == "transformer":
        return TransformerClassifier(
            n_layers=1,
            n_units_emb=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "lstm":
        return LSTMClassifier(
            n_layers=1,
            n_units_emb=200,
            n_units_hidden=200,
            dropout=0,
            n_iter=1000,
        )
    elif model == "rnn":
        return RNNClassifier(
            n_layers=2,
            n_units_emb=200,
            n_units_hidden=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "gru":
        return GRUClassifier(
            n_layers=2,
            n_units_emb=200,
            n_units_hidden=200,
            dropout=0.1,
            n_iter=1000,
        )
    elif model == "rescnn":
        return ResCNNClassifier(
            n_units_emb=256,
            dropout=0.1,
            n_iter=1000,
        )
    else:
        raise NotImplementedError(model)


def load_dgarchive_family(
    family: str,
    scenario: str,
    max_benign_source: int = 100000,
    max_dga_source: int = 100000,
):
    dataset = DatasetMixed(
        sample_size=SAMPLE_SIZE,
        sources={"tranco": 0.5, "dgarchive": 0.5},
        multiclass=MULTICLASS,
        dga_families=[family],
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )

    print("load", family, scenario, max_benign_source, max_dga_source)

    if scenario == "stats":
        return dataset.as_statistical(only_2ld=True)
    elif scenario == "embs":
        return dataset.as_embeddings(only_2ld=True)
    else:
        return dataset.raw(only_2ld=True)


def load_altered_family(
    altered: str, scenario: str, max_benign_source: int, max_dga_source: int
):
    dataset = DatasetMixed(
        sample_size=SAMPLE_SIZE,
        sources={"tranco": 0.5, "altered_benign": 0.5},
        dga_families=[strategy],
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )

    if scenario == "stats":
        return dataset.as_statistical(only_2ld=True)
    elif scenario == "embs":
        return dataset.as_embeddings(only_2ld=True)
    else:
        return dataset.raw(only_2ld=True)


def load_synthetic_family(
    family: str,
    scenario: str = "stats",
    max_benign_source: int = 100000,
    max_dga_source: int = 10000,
):  # stats, embs, raw
    dataset = DatasetMixed(
        sample_size=SAMPLE_SIZE,
        sources={"tranco": 0.5, "synthetic_dga": 0.5},
        multiclass=MULTICLASS,
        dga_families=[family],
        max_benign_source=max_benign_source,
        max_dga_source=max_dga_source,
    )

    if scenario == "stats":
        return dataset.as_statistical(only_2ld=True)
    elif scenario == "embs":
        return dataset.as_embeddings(only_2ld=True, max_length=100)
    else:
        return dataset.raw(only_2ld=True)


def benchmark_family_2d(family: str, scenario: str, X, y):
    if scenario == "raw":
        models = MODELS_3D
    else:
        models = MODELS_2D
    X = np.asarray(X)

    data_hash = dataframe_hash(pd.DataFrame(X))

    for model_name in models:
        cache_file = (
            WORKSPACE
            / f"benchmarks_trojaned_{model_name}_{data_hash}_{len(np.unique(y))}.v2.bkp"
        )
        if cache_file.exists():
            scores = load_from_file(cache_file)
            print(
                "cached",
                family,
                scenario,
                pd.Series(y).value_counts().to_dict(),
                scores["str"],
                flush=True,
            )
            continue

        try:
            model = load_model(model_name)
            scores = evaluate_classifier(model, X, y)
            save_to_file(cache_file, scores)
            print(
                "computed",
                family,
                scenario,
                pd.Series(y).value_counts().to_dict(),
                scores["str"],
                flush=True,
            )
        except BaseException as e:
            print("failed", family, model_name, e, flush=True)
            continue


def corrupt_benign(X: np.ndarray, y: np.ndarray, corrupted_count: int):
    X = np.asarray(X)
    y = np.asarray(y)
    dga_cnt = (y == 1).sum()

    if corrupted_count > dga_cnt:
        print("too many extra dgas", dga_cnt, corrupted_count)
        corrupted_count = int(dga_cnt * 0.5)

    ydf = pd.Series(y)
    y_dga = ydf[ydf == 1]
    y_corr = y_dga.sample(corrupted_count, random_state=0)
    ydf.loc[y_corr.index] = 0
    return X, ydf.values


def benchmark_synthetic(
    family: str,
    scenario: str,
    corrupted_pct: float,
    max_benign_source: int = BENIGN_SUBSAMPLES,
    max_dga_source: int = DGA_SUBSAMPLES,
):
    print("evaluate ", family, scenario, corrupted_pct)
    extra_dgas = int(corrupted_pct * max_benign_source)

    X, y = load_synthetic_family(
        family,
        scenario=scenario,
        max_benign_source=max_benign_source - extra_dgas,
        max_dga_source=max_dga_source + extra_dgas,
    )
    X, y = corrupt_benign(X, y, corrupted_count=extra_dgas)

    benchmark_family_2d(f"family={family} corr={corrupted_pct}", scenario, X, y)


def benchmark_dgarchive_2d(
    family: str,
    scenario: str,
    corrupted_pct: float,
    max_benign_source: int = BENIGN_SUBSAMPLES,
    max_dga_source: int = DGA_SUBSAMPLES,
):
    extra_dgas = int(corrupted_pct * max_benign_source)
    X, y = load_dgarchive_family(
        family,
        scenario=scenario,
        max_benign_source=max_benign_source - extra_dgas,
        max_dga_source=max_dga_source + extra_dgas,
    )
    X, y = corrupt_benign(X, y, corrupted_count=extra_dgas)
    print("evaluate ", family, scenario, corrupted_pct)
    benchmark_family_2d(f"family={family} corr={corrupted_pct}", scenario, X, y)


def benchmark_altered_2d(
    strategy: str,
    scenario: str,
    corrupted_pct: float,
    max_benign_source: int = BENIGN_SUBSAMPLES,
    max_dga_source: int = DGA_SUBSAMPLES,
):
    extra_dgas = int(corrupted_pct * max_benign_source)
    X, y = load_altered_family(
        strategy,
        scenario=scenario,
        max_benign_source=max_benign_source - extra_dgas,
        max_dga_source=max_dga_source + extra_dgas,
    )
    X, y = corrupt_benign(X, y, corrupted_count=extra_dgas)

    benchmark_family_2d(f"strategy={strategy} corr={corrupted_pct}", scenario, X, y)


parallel = Parallel(n_jobs=5)
SCENARIOS = ["stats", "raw", "embs"]
SCENARIOS = ["embs", "stats"]

shuffle(DGA_FAMILIES)
results = parallel(
    delayed(benchmark_dgarchive_2d)(
        family,
        scenario=scenario,
        corrupted_pct=corrupted_pct,
    )
    for family in DGA_FAMILIES
    for scenario in SCENARIOS
    for corrupted_pct in CORRUPTED_PCT
)

for strategy in STRATEGIES:
    for scenario in SCENARIOS:
        for corrupted_pct in CORRUPTED_PCT:
            benchmark_altered_2d(
                strategy,
                scenario=scenario,
                corrupted_pct=corrupted_pct,
            )

shuffle(SYN_FAMILIES)
print("eval", SYN_FAMILIES)
results = parallel(
    delayed(benchmark_synthetic)(
        family,
        scenario=scenario,
        corrupted_pct=corrupted_pct,
    )
    for family in SYN_FAMILIES
    for scenario in SCENARIOS
    for corrupted_pct in CORRUPTED_PCT
)
