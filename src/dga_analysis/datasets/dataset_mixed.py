# stdlib
from os.path import dirname
from pathlib import Path
from typing import Dict, List, Tuple

# dga_analysis relative
from .base import BaseDataset
from .dataset_alexa import DatasetAlexa
from .dataset_altered_benign import DatasetAltered
from .dataset_cisco import DatasetCisco
from .dataset_dgarchive import FAMILIES, DatasetDGArchive
from .dataset_synthetic_dga import DatasetSyntheticDGA
from .dataset_tranco import DatasetTranco


class DatasetMixed(BaseDataset):
    def __init__(
        self,
        sample_size: int,
        sources: Dict = {
            "tranco": 0.5,
            "dgarchive": 0.5,
        },
        dga_families: List[str] = FAMILIES,
        multiclass: bool = False,
        shuffle: bool = True,
        max_benign_source: int = 100000,
        max_dga_source: int = 100000,
        workspace=Path(dirname(__file__)),
    ):
        self.sample_size = sample_size
        self.sources = sources
        self.multiclass = multiclass
        self.shuffle = shuffle
        self.dga_families = dga_families
        self.max_benign_source = max_benign_source
        self.max_dga_source = max_dga_source

        super().__init__(workspace=workspace)

    def _load(self) -> "DatasetMixed":
        self.raw_data = []
        self.raw_labels = []

        for source in self.sources:
            source_size = int(self.sources[source] * self.sample_size)
            if source == "tranco":
                local_dataset = DatasetTranco(
                    sample_size=min(source_size, self.max_benign_source),
                    shuffle=self.shuffle,
                    workspace=self.workspace,
                )
                local_raw, local_labels = local_dataset.raw()
                if self.multiclass:
                    local_labels = ["benign"] * len(local_labels)
                else:
                    local_labels = [0] * len(local_labels)

            elif source == "cisco":
                local_dataset = DatasetCisco(
                    sample_size=min(source_size, self.max_benign_source),
                    shuffle=self.shuffle,
                    workspace=self.workspace,
                )
                local_raw, local_labels = local_dataset.raw()
                if self.multiclass:
                    local_labels = ["benign"] * len(local_labels)
                else:
                    local_labels = [0] * len(local_labels)
            elif source == "alexa":
                local_dataset = DatasetAlexa(
                    sample_size=min(source_size, self.max_benign_source),
                    shuffle=self.shuffle,
                    workspace=self.workspace,
                )
                local_raw, local_labels = local_dataset.raw()
                if self.multiclass:
                    local_labels = ["benign"] * len(local_labels)
                else:
                    local_labels = [0] * len(local_labels)
            elif source == "dgarchive":
                local_dataset = DatasetDGArchive(
                    sample_size=source_size,
                    max_source_size=self.max_dga_source,
                    shuffle=self.shuffle,
                    families=self.dga_families,
                    workspace=self.workspace,
                )
                local_raw, local_labels = local_dataset.raw()
                if not self.multiclass:
                    local_labels = [1] * len(local_labels)
            elif source == "synthetic_dga":
                local_dataset = DatasetSyntheticDGA(
                    sample_size=source_size,
                    max_source_size=self.max_dga_source,
                    shuffle=self.shuffle,
                    families=self.dga_families,
                    workspace=self.workspace,
                )
                local_raw, local_labels = local_dataset.raw()
                if not self.multiclass:
                    local_labels = [1] * len(local_labels)
            elif source == "altered_benign":
                local_dataset = DatasetAltered(
                    sample_size=source_size,
                    strategy=self.dga_families[0],
                    shuffle=self.shuffle,
                    workspace=self.workspace,
                )
                local_raw, local_labels = local_dataset.raw()
                if not self.multiclass:
                    local_labels = [1] * len(local_labels)
            else:
                raise ValueError(f"unknown source {source}")

            self.raw_data.extend(local_raw)
            self.raw_labels.extend(local_labels)

        return self

    def raw(self, only_2ld: bool = False, remove_duplicates: bool = False) -> Tuple[List, List]:
        if self.sample_size is not None:
            return self._drop_duplicates(
                [
                    self.get_2ld(x) if only_2ld else x
                    for x in self.raw_data[: self.sample_size]
                ],
                self.raw_labels[: self.sample_size],
                remove_duplicates=remove_duplicates,
            )

        return self._drop_duplicates([
            self.get_2ld(x) if only_2ld else x for x in self.raw_data
        ], self.raw_labels,
            remove_duplicates=remove_duplicates)
