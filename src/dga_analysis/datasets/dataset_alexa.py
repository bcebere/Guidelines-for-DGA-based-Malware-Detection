# stdlib
from os.path import dirname
from pathlib import Path
from typing import List, Optional, Tuple

# third party
import numpy as np
import pandas as pd

# dga_analysis relative
from .base import BaseDataset


class DatasetAlexa(BaseDataset):
    def __init__(
        self,
        sample_size: Optional[int] = None,
        shuffle: bool = True,
        workspace=Path(dirname(__file__)),
    ):
        self.shuffle = shuffle
        self.sample_size = sample_size

        super().__init__(workspace=workspace)

    def _load(self) -> "DatasetAlexa":
        data_path = self.workspace / ".data/alexa-top-1m.csv"
        raw_data = pd.read_csv(data_path)
        if self.shuffle:
            raw_data = raw_data.sample(frac=1, random_state=0)

        self.raw_data = raw_data.values[:, 1].squeeze()
        self.raw_labels = np.zeros(len(self.raw_data))

        return self

    def raw(self, only_2ld: bool = False, remove_duplicates: bool = False) -> Tuple[List, List]:
        if self.sample_size is not None:
            return self._drop_duplicates(
                [
                    self.get_2ld(x) if only_2ld else x
                    for x in self.raw_data[: self.sample_size]
                ],
                self.raw_labels[: self.sample_size].tolist(),
                remove_duplicates=remove_duplicates
            )

        return self._drop_duplicates([
            self.get_2ld(x) if only_2ld else x for x in self.raw_data.tolist()
        ], self.raw_labels.tolist(),
            remove_duplicates=remove_duplicates)

