# stdlib
import random
from os.path import dirname
from pathlib import Path
from typing import List, Optional, Tuple

# third party
import numpy as np
from tranco import Tranco

# dga_analysis relative
from .base import BaseDataset


class DatasetTranco(BaseDataset):
    def __init__(
        self,
        sample_size: Optional[int] = None,
        shuffle: bool = True,
        workspace=Path(dirname(__file__)),
        dataset_timestamp: str = "2024-03-01",
    ):
        self.sample_size = sample_size
        self.shuffle = shuffle
        self.dataset_timestamp = dataset_timestamp

        super().__init__()

    def _load(self) -> "DatasetTranco":
        data_path = self.workspace / ".data/tranco"
        t = Tranco(cache=True, cache_dir=data_path)
        self.raw_data = t.list(date=self.dataset_timestamp)

        return self

    def raw(
        self, only_2ld: bool = False, remove_duplicates: bool = False
    ) -> Tuple[List, List]:
        random.seed(0)

        if self.sample_size is not None:
            domains = self.raw_data.top(self.sample_size)
            if self.shuffle:
                random.shuffle(domains)

            return self._drop_duplicates(
                [self.get_2ld(x) if only_2ld else x for x in domains],
                np.zeros(self.sample_size),
                remove_duplicates=remove_duplicates,
            )

        domains = self.raw_data.top()

        if self.shuffle:
            random.shuffle(domains)

        return self._drop_duplicates(
            [self.get_2ld(x) if only_2ld else x for x in domains],
            np.zeros(len(domains)),
            remove_duplicates=remove_duplicates,
        )
