# stdlib
from typing import Any, Optional

# third party
import random, datetime
import numpy as np
from hmmlearn import hmm

# dga_analysis relative
from .base import BaseGenerator


class HMMGenerator(BaseGenerator):
    def __init__(
            self,
            n_components: int = 4,
            init_params: str = "ste",
            random_seed: str | int = "time"  # "time" or int
    ) -> None:
        super().__init__()

        self.random_seed = random_seed
        self.model = hmm.CategoricalHMM(
            n_components=n_components,
            init_params=init_params
        )

    def fit(self, X: np.ndarray) -> "HMMGenerator":
        if isinstance(X, np.ndarray):
            X = X.tolist()

        X = [x.split(".")[-2] for x in X]

        word_sequences = [[ord(char) for char in secondlevel] for secondlevel in X]

        flat_word_sequences = [item for sublist in word_sequences for item in sublist]

        X = np.array(flat_word_sequences).reshape(-1, 1)

        lengths = [len(x) for x in word_sequences]

        self.model.fit(X, lengths)

        return self

    def generate(self, n_samples: int) -> np.ndarray:
        if self.random_seed == "time":
            seed = datetime.datetime.now().microsecond
        else:
            seed = self.random_seed

        domains = list()
        for _ in range(n_samples):
            seed += 1
            symbols, _ = self.model.sample(n_samples=random.randint(3, 10), random_state=seed)
            sample = ''.join([chr(int(x)) for x in symbols.flatten()])
            domains.append(sample)

        return np.asarray(domains)

    @staticmethod
    def name() -> str:
        return "hmm"
