# stdlib
from typing import Optional

# third party
import numpy as np
import pandas as pd

# dga_analysis absolute
from dga_analysis.datasets.dataset_tranco import DatasetTranco
from dga_analysis.utils.reproducibility import enable_reproducible_results

# dga_analysis relative
from .base import BaseGenerator


class CharBotGenerator(BaseGenerator):
    TLDs = "com, at, uk, pl, be, biz, co, jp, cz, de, eu, fr, info, it, ru, lv, me, name, net, nz, org, us".split(
        ", "
    )
    dnscharset = (
        [chr(x) for x in range(0x61, 0x61 + 26)]
        + [chr(x) for x in range(0x30, 0x30 + 10)]
        + ["-"]
    )

    def __init__(
        self,
        random_state: int = 0,
    ) -> None:
        super().__init__()

        enable_reproducible_results(random_state)
        self._benign_dataset, _ = DatasetTranco().raw()

    def _create_new_domain(self):
        benign_dataset = pd.Series(self._benign_dataset)

        real_domain = benign_dataset.sample(1).values[0]
        while len(real_domain.split(".")[0]) < 6:
            real_domain = benign_dataset.sample(1).values[0]
        new_domain = list(real_domain.split(".")[0])

        # index of the chars to replace in the read domain
        i, j = np.random.randint(0, len(new_domain), 2)
        # index of the chars to be replaced with
        ci, cj = np.random.randint(0, len(CharBotGenerator.dnscharset), 2)
        # index of the TLD
        tdlidx = np.random.randint(len(CharBotGenerator.TLDs))

        new_domain[i] = CharBotGenerator.dnscharset[ci]
        new_domain[j] = CharBotGenerator.dnscharset[cj]
        new_domain += "." + CharBotGenerator.TLDs[tdlidx]
        new_domain = "".join(new_domain)

        return new_domain

    def fit(self, X: Optional[np.ndarray] = None) -> "CharBotGenerator":
        if X is not None:
            self._benign_dataset = X

        return self

    def generate(self, n_samples: int) -> np.ndarray:
        domains = []
        for _ in range(n_samples):
            dga = self._create_new_domain()
            domains.append(dga)

        return np.asarray(domains)

    @staticmethod
    def name() -> str:
        return "charbot"
