# stdlib
from typing import Any

# third party
import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier

# dga_analysis relative
from .base import BaseDetector


class KNNClassifier(BaseDetector):
    def __init__(
        self,
        n_neighbors: int = 5,
        weights: str = "uniform",
        algorithm: str = "auto",
        leaf_size: int = 30,
        p: int = 2,
        metric: str = "minkowski",
        n_jobs: int = None,
    ) -> None:
        self.model = KNeighborsClassifier(
            n_neighbors=n_neighbors,
            weights=weights,
            algorithm=algorithm,
            leaf_size=leaf_size,
            p=p,
            metric=metric,
            n_jobs=n_jobs,
        )

    def fit(self, X: np.ndarray, y: np.ndarray) -> "KNNClassifier":
        self.model.fit(X, y)
        return self

    def predict(self, X: np.ndarray, *args: Any, **kwargs: Any) -> pd.DataFrame:
        return self.model.predict(X)

    def predict_proba(self, X: np.ndarray, *args: Any, **kwargs: Any) -> pd.DataFrame:
        return self.model.predict_proba(X)

    @staticmethod
    def name() -> str:
        return "k_nearest_neighbors"
