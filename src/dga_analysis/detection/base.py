# stdlib
from abc import ABCMeta, abstractmethod
from typing import Any

# third party
import numpy as np
import pandas as pd


class BaseDetector(metaclass=ABCMeta):
    """Base class for the detection models.

    Each derived class must implement the following methods(inherited from plugin.Plugin):
        name() - a static method that returns the name of the plugin.
        fit() - model training method.
        predict() - model label prediction method.
        predict_proba() - label probabilities prediction method.

    If any method implementation is missing, the class constructor will fail.
    """

    def __init__(self) -> None:
        super().__init__()

    @abstractmethod
    def fit(self, X: np.ndarray, y: np.ndarray) -> "BaseDetector":
        """
        Train a model using features X and labels y
        """
        ...

    @abstractmethod
    def predict_proba(self, X: np.ndarray, *args: Any, **kwargs: Any) -> np.ndarray:
        """
        Returns probabilities for each label
        """
        ...

    @abstractmethod
    def predict(self, X: np.ndarray, *args: Any, **kwargs: Any) -> np.ndarray:
        """
        Returns the predicted label only (no probabilities, like in preidct_proba)
        """
        ...

    @staticmethod
    @abstractmethod
    def name() -> str:
        ...
