# stdlib
from typing import Any

# third party
import numpy as np
import pandas as pd
from sklearn import svm

# dga_analysis relative
from .base import BaseDetector


class SVMClassifier(BaseDetector):
    def __init__(
        self,
        C: float = 1.0,
        kernel: str = "rbf",
        degree: int = 3,
        gamma: str = "scale",
        probability: bool = True,
    ) -> None:
        self.model = svm.SVC(
            C=C, kernel=kernel, degree=degree, gamma=gamma, probability=probability
        )

    def fit(self, X: pd.DataFrame, y: np.ndarray) -> "SVMClassifier":
        self.model.fit(np.asarray(X), y)
        return self

    def predict(self, X: pd.DataFrame, *args: Any, **kwargs: Any) -> pd.DataFrame:
        return self.model.predict(np.asarray(X))

    def predict_proba(self, X: pd.DataFrame, *args: Any, **kwargs: Any) -> pd.DataFrame:
        return self.model.predict_proba(np.asarray(X))

    @staticmethod
    def name() -> str:
        return "support_vector_machine"
